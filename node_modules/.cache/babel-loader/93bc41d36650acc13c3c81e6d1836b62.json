{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {\n  return String.fromCharCode(Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xD800, (astralCodePoint - 0x10000) % 0x400 + 0xDC00);\n};\n\nexports.getCodePoint = String.prototype.codePointAt ? function (input, position) {\n  return input.codePointAt(position);\n} : function (input, position) {\n  return (input.charCodeAt(position) - 0xD800) * 0x400 + input.charCodeAt(position + 1) - 0xDC00 + 0x10000;\n};\nexports.highSurrogateFrom = 0xD800;\nexports.highSurrogateTo = 0xDBFF;","map":{"version":3,"sources":["C:/Users/souma/Desktop/New folder/my-browser-extension/node_modules/html-entities/lib/surrogate-pairs.js"],"names":["Object","defineProperty","exports","value","fromCodePoint","String","astralCodePoint","fromCharCode","Math","floor","getCodePoint","prototype","codePointAt","input","position","charCodeAt","highSurrogateFrom","highSurrogateTo"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACAD,OAAO,CAACE,aAAR,GAAwBC,MAAM,CAACD,aAAP,IAAwB,UAAUE,eAAV,EAA2B;AACvE,SAAOD,MAAM,CAACE,YAAP,CAAoBC,IAAI,CAACC,KAAL,CAAW,CAACH,eAAe,GAAG,OAAnB,IAA8B,KAAzC,IAAkD,MAAtE,EAA8E,CAACA,eAAe,GAAG,OAAnB,IAA8B,KAA9B,GAAsC,MAApH,CAAP;AACH,CAFD;;AAGAJ,OAAO,CAACQ,YAAR,GAAuBL,MAAM,CAACM,SAAP,CAAiBC,WAAjB,GACnB,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AACvB,SAAOD,KAAK,CAACD,WAAN,CAAkBE,QAAlB,CAAP;AACH,CAHkB,GAInB,UAAUD,KAAV,EAAiBC,QAAjB,EAA2B;AACvB,SAAO,CAACD,KAAK,CAACE,UAAN,CAAiBD,QAAjB,IAA6B,MAA9B,IAAwC,KAAxC,GACDD,KAAK,CAACE,UAAN,CAAiBD,QAAQ,GAAG,CAA5B,CADC,GACgC,MADhC,GACyC,OADhD;AAEH,CAPL;AAQAZ,OAAO,CAACc,iBAAR,GAA4B,MAA5B;AACAd,OAAO,CAACe,eAAR,GAA0B,MAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {\n    return String.fromCharCode(Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xD800, (astralCodePoint - 0x10000) % 0x400 + 0xDC00);\n};\nexports.getCodePoint = String.prototype.codePointAt ?\n    function (input, position) {\n        return input.codePointAt(position);\n    } :\n    function (input, position) {\n        return (input.charCodeAt(position) - 0xD800) * 0x400\n            + input.charCodeAt(position + 1) - 0xDC00 + 0x10000;\n    };\nexports.highSurrogateFrom = 0xD800;\nexports.highSurrogateTo = 0xDBFF;\n"]},"metadata":{},"sourceType":"script"}